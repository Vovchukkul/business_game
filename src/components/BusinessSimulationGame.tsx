import { useState } from 'react';
import { motion } from 'framer-motion';
import { Mail, User } from 'lucide-react';
import emailjs from '@emailjs/browser';

type Option = {
    text: string,
    score: number,
    cost: number,
}

type Scenario = {
    question: string,
    description: string,
    emoji: string,
    options: Option[]
}

const scenarios: Scenario[] = [
  {
    question: '1. –í–∏–±—ñ—Ä –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    description: '–û–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞.',
    emoji: 'üè≠‚öôÔ∏èüí∏',
    options: [
      { text: '–ù–æ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (300 000 –≥—Ä–Ω)', score: 15, cost: 300000 },
      { text: '–í–∂–∏–≤–∞–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (120 000 –≥—Ä–Ω)', score: 5, cost: 120000 },
      { text: '–û—Ä–µ–Ω–¥–∞ (30 000 –≥—Ä–Ω)', score: 10, cost: 30000 }
    ]
  },
  {
    question: '2. –ú–µ—Ç–æ–¥ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü—ñ—ó',
    description: '–Ø–∫–∏–π –º–µ—Ç–æ–¥ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü—ñ—ó –æ–±–µ—Ä–µ—à –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—ó?',
    emoji: 'üìâüìëüí°',
    options: [
      { text: '–ü—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–π ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω–æ', score: 10, cost: 0 },
      { text: '–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–∏–π ‚Äî –≤–∏–≥—ñ–¥–Ω–æ –∑–∞—Ä–∞–∑', score: 12, cost: 0 },
      { text: '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π ‚Äî –±—ñ–ª—å—à–µ —Å–ø–∏—à–µ–º–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É', score: 8, cost: 0 },
      { text: '–í–∏—Ä–æ–±–Ω–∏—á–∏–π ‚Äî –≥–Ω—É—á–∫–∏–π, –∞–ª–µ –ø–æ—Ç—Ä–µ–±—É—î —Ç–æ—á–Ω–æ—Å—Ç—ñ', score: 10, cost: 0 }
    ]
  },
  {
    question: '3. –û–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑–Ω–æ—Å–∏–ª–æ—Å—å –Ω–∞ 60%',
    description: '–Ø–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∏–π–º–µ—à?',
    emoji: 'üßØüîß‚ö†Ô∏è',
    options: [
      { text: '–†–µ–º–æ–Ω—Ç (50 000 –≥—Ä–Ω)', score: 14, cost: 50000 },
      { text: '–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É', score: -5, cost: 0 },
      { text: '–ö—É–ø–∏—Ç–∏ –Ω–æ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è(300 000 –≥—Ä–Ω)', score: 15, cost: 300000 }
    ]
  },
  {
    question: '4. –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è: —â–æ –∫—É–ø—É—î–º–æ?',
    description: '–û–±–µ—Ä–∏ –∞–∫—Ç–∏–≤ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—ñ—Ä–º–∏.',
    emoji: 'üõªüè¢üöÄ',
    options: [
      { text: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Äî —à–≤–∏–¥—à–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç–∏–º–µ–º–æ (100 000 –≥—Ä–Ω)', score: 10, cost: 100000 },
      { text: '–ù–æ–≤—ñ –º–∞—à–∏–Ω–∏ ‚Äî –±—ñ–ª—å—à–∏–π –æ–±—Å—è–≥ (200 000 –≥—Ä–Ω)', score: 15, cost: 200000 },
      { text: '–ë—É–¥—ñ–≤–ª—è ‚Äî –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è (500 000 –≥—Ä–Ω)', score: 12, cost: 500000 }
    ]
  },
  {
    question: '5. –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
    description: '–Ø–∫ –æ—Ü—ñ–Ω—é—î—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤?',
    emoji: 'üìäüìàü§î',
    options: [
      { text: '–§–æ–Ω–¥–æ–≤—ñ–¥–¥–∞—á–∞', score: 10, cost: 0 },
      { text: '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å', score: 12, cost: 0 },
      { text: '–ù–µ –∞–Ω–∞–ª—ñ–∑—É—é', score: -5, cost: 0 }
    ]
  },
  {
    question: '6. –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —á–∏ –º–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è?',
    description: '–û—Å–Ω–æ–≤–Ω—ñ –∑–∞—Å–æ–±–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏. –©–æ —Ä–æ–±–∏—à?',
    emoji: 'üèóÔ∏è‚öôÔ∏èüîÑ',
    options: [
      { text: '–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è (150 000 –≥—Ä–Ω)', score: 10, cost: 150000 },
      { text: '–ú–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è (80 000 –≥—Ä–Ω)', score: 8, cost: 80000 },
      { text: '–°–ø–∏—Å–∞—Ç–∏ –π –∫—É–ø–∏—Ç–∏ –Ω–æ–≤–µ (300 000 –≥—Ä–Ω)', score: 15, cost: 300000 }
    ]
  },
  {
    question: '7. –î–∂–µ—Ä–µ–ª–æ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è',
    description: '–û–±–∏—Ä–∞–π –¥–∂–µ—Ä–µ–ª–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –Ω–æ–≤–∏—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤.',
    emoji: 'üí∞üè¶üìù',
    options: [
      { text: '–í–ª–∞—Å–Ω—ñ –∫–æ—à—Ç–∏ (200 000 –≥—Ä–Ω)', score: 12, cost: 200000 },
      { text: '–ö—Ä–µ–¥–∏—Ç', score: 10, cost: 0 },
      { text: '–õ—ñ–∑–∏–Ω–≥ (100 000 –≥—Ä–Ω)', score: 8, cost: 100000 }
    ]
  },
  {
    question: '8. –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ 90%',
    description: '–©–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ?',
    emoji: 'üîãüèÉ‚Äç‚ôÇÔ∏èüì¶',
    options: [
      { text: '–ü—Ä–∏–¥–±–∞—Ç–∏ –Ω–æ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (300 000 –≥—Ä–Ω)', score: 15, cost: 300000 },
      { text: '–£–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ –±—ñ–ª—å—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω —Ä–æ–±–æ—Ç–∏(50 000 –≥—Ä–Ω)', score: 14, cost: 50000 },
      { text: '–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å –≤—ñ–¥ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å', score: -5, cost: 0 }
    ]
  },
  {
    question: '9. –û–±–ª—ñ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤',
    description: '–Ø–∫ –æ–±–ª—ñ–∫–æ–≤—É–≤–∞—Ç–∏–º–µ—à –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞—Å–æ–±–∏?',
    emoji: 'üìáüßæüìö',
    options: [
      { text: '–£ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–º—É –≤–∏—Ä–∞–∂–µ–Ω–Ω—ñ', score: 8, cost: 0 },
      { text: '–£ –≤–∞—Ä—Ç—ñ—Å–Ω–æ–º—É –≤–∏—Ä–∞–∂–µ–Ω–Ω—ñ', score: 10, cost: 0 },
      { text: '–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏', score: 12, cost: 0 }
    ]
  },
  {
    question: '10. –õ—ñ–∫–≤—ñ–¥–∞—Ü—ñ—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    description: '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–Ω–æ—Å–∏–ª–æ—Å—å. –©–æ —Ä–æ–±–∏—à?',
    emoji: 'üóëÔ∏èüìâ‚ôªÔ∏è',
    options: [
      { text: '–ü—Ä–æ–¥–∞—Ç–∏ –∑–∞ –∑–∞–ª–∏—à–∫–æ–≤–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é (+50 000 –≥—Ä–Ω)', score: 10, cost: -50000 },
      { text: '–ó–¥–∞—Ç–∏ –Ω–∞ –º–µ—Ç–∞–ª–æ–±—Ä—É—Ö—Ç (+20 000 –≥—Ä–Ω)', score: 8, cost: -20000 },
      { text: '–ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏', score: -5, cost: 0 }
    ]
  }
];


const Button = ({ children, ...props }: any) => (
  <button
    {...props}
    className="w-full text-left px-4 py-2 bg-blue-600 text-white rounded-xl shadow hover:bg-blue-700 transition"
    style={{marginTop: "10px"}}
  >
    {children}
  </button>
);

const Card = ({ children }: { children: React.ReactNode }) => (
  <div className="bg-white rounded-2xl shadow-md p-4 border border-gray-200">{children}</div>
);

const CardContent = ({ children, className }: { children: React.ReactNode; className?: string }) => (
    <div className={`space-y-3 ${className || ''}`}>{children}</div>
  );
  
const Input = ({ placeholder, icon, value, onChange }: any) => (
  <div className="flex items-center border rounded-xl px-3 py-2 bg-gray-100">
    {icon && <span className="mr-2 text-gray-700">{icon}</span>}
    <input
      className="bg-transparent outline-none flex-1"
      placeholder={placeholder}
      value={value}
      onChange={onChange}
    />
  </div>
);

const INITIAL_CAPITAL = 1200000;

export default function BusinessSimulationGame() {
    const [step, setStep] = useState(-1);
    const [userInfo, setUserInfo] = useState({ name: '', email: '' });
    const [score, setScore] = useState(0);
    const [capital, setCapital] = useState<number>(INITIAL_CAPITAL);
    const [completed, setCompleted] = useState(false);
    const [showIntro, setShowIntro] = useState(false);
  
    const handleAnswer = (option: { score: number; cost: number }) => {
        const newScore = score + option.score;
        const newCapital = capital - option.cost;
        setScore(newScore);
        setCapital(newCapital);
        const nextStep = step + 1;
        if (nextStep < scenarios.length) {
          setStep(nextStep);
        } else {
          setCompleted(true);
          sendResults(newScore, newCapital);
        }
      };
      const sendResults = async (finalScore: number, finalCapital: number) => {
        try {
          const templateParams = {
            name: userInfo.name,
            email: userInfo.email,
            score: finalScore.toString(),
            capital: finalCapital.toString(),
            to_email: userInfo.email,
            admin_email: 'vovchukkul@gmail.com'
          };
    
          await emailjs.send('service_8t2qy2m', 'template_0em3b01', 
            {
              ...templateParams,
              to_email: `${userInfo.email}`
            }, 'sA3M3ggMlrct6XaTb');
          await emailjs.send('service_8t2qy2m', 'template_0em3b01', {
            ...templateParams,
            to_email: 'vovchukkul@gmail.com'
          }, 'sA3M3ggMlrct6XaTb');
    
          console.log('–û–±–∏–¥–≤–∞ –ª–∏—Å—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—à—Ç–∏:', error);
        }
      };

  if (step === -1 && !showIntro) {
    return (
      <div className="p-6 max-w-lg mx-auto space-y-4">
        <h1 className="text-2xl font-bold text-center">–í–≤–µ–¥–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏</h1>
        <div className="space-y-2">
          <Input
            placeholder="–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ"
            icon={<User className="w-4 h-4" />}
            value={userInfo.name}
            onChange={(e: { target: { value: any; }; }) => setUserInfo({ ...userInfo, name: e.target.value })}
          />
          <Input
            placeholder="Email"
            type="email"
            icon={<Mail className="w-4 h-4" />}
            value={userInfo.email}
            onChange={(e: { target: { value: any; }; }) => setUserInfo({ ...userInfo, email: e.target.value })}
          />
          <Button onClick={() => userInfo.name && userInfo.email && setShowIntro(true)}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</Button>
        </div>
      </div>
    );
  }

  if (step === -1 && showIntro) {
    return (
      <div className="p-6 max-w-3xl mx-auto space-y-6">
        <h2 className="text-3xl font-bold text-center">–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á—ñ</h2>
        <p>–í—ñ—Ç–∞—î–º–æ, {userInfo.name}! –¢–∏ ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—á–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî <b>–∫–µ—Ä—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∑–∞—Å–æ–±–∞–º–∏ —Ñ—ñ—Ä–º–∏, –ø—Ä–∏–π–º–∞—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω—Å—å–∫—ñ —Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –±—ñ–∑–Ω–µ—Å.</b></p>
        <ul className="list-disc pl-6">
          <li><strong>–ö–∞–ø—ñ—Ç–∞–ª:</strong> 1 000 000 –≥—Ä–Ω</li>
          <li><strong>–†–µ–ø—É—Ç–∞—Ü—ñ—è:</strong> 0/100</li>
          <li><strong>–ó–Ω–æ—Å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:</strong> 0%</li>
          <li><strong>–Ø–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü—ñ—ó:</strong> 0/100</li>
          <li><strong>–ú–æ—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤:</strong> 0/100</li>
          <li><strong>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:</strong> 0%</li>
        </ul>
        <p className="pt-4 font-medium">–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî <b>–ø—Ä–∏–π–º–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è, —è–∫—ñ –ø–æ–∫—Ä–∞—â–∞—Ç—å —Ü—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏.</b></p>
        <div className="pt-4">
          <table className="w-full text-sm border mt-4">
            <thead className="bg-gray-200">
              <tr>
                <th className="border px-2 py-1">–ü–æ–∫–∞–∑–Ω–∏–∫</th>
                <th className="border px-2 py-1">–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è</th>
              </tr>
            </thead>
            <tbody>
              <tr><td className="border px-2 py-1">–ö–∞–ø—ñ—Ç–∞–ª</td><td className="border px-2 py-1">1 000 000 –≥—Ä–Ω</td></tr>
              <tr><td className="border px-2 py-1">–†–µ–ø—É—Ç–∞—Ü—ñ—è</td><td className="border px-2 py-1">0/100</td></tr>
              <tr><td className="border px-2 py-1">–ó–Ω–æ—Å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è</td><td className="border px-2 py-1">0%</td></tr>
              <tr><td className="border px-2 py-1">–Ø–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü—ñ—ó</td><td className="border px-2 py-1">0/100</td></tr>
              <tr><td className="border px-2 py-1">–ú–æ—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤</td><td className="border px-2 py-1">0/100</td></tr>
              <tr><td className="border px-2 py-1">–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞</td><td className="border px-2 py-1">0%</td></tr>
            </tbody>
          </table>
        </div>
        <div className="text-center pt-6">
          <Button onClick={() => setStep(0)}>–†–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É</Button>
        </div>
      </div>
    );
  }

  if (completed) {
    return (
      <div className="p-6 text-center space-y-6">
        <h2 className="text-2xl font-bold">–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É, {userInfo.name}!</h2>
        <p className="text-lg">–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Math.ceil(score/10)} –±–∞–ª—ñ–≤</p>
        <div className="pt-4">
          <table className="w-full text-sm border mt-4">
            <thead className="bg-gray-200">
              <tr>
                <th className="border px-2 py-1">–ü–æ–∫–∞–∑–Ω–∏–∫</th>
                <th className="border px-2 py-1">–û—Ü—ñ–Ω–∫–∞ –ø—ñ—Å–ª—è –≥—Ä–∏</th>
              </tr>
            </thead>
            <tbody>
              <tr><td className="border px-2 py-1">–ö–∞–ø—ñ—Ç–∞–ª</td><td className="border px-2 py-1">{(capital + score * 100)} –≥—Ä–Ω</td></tr>
              <tr><td className="border px-2 py-1">–†–µ–ø—É—Ç–∞—Ü—ñ—è</td><td className="border px-2 py-1">{Math.min(score, 100)}/100</td></tr>
              <tr><td className="border px-2 py-1">–Ø–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü—ñ—ó</td><td className="border px-2 py-1">{Math.min(score / 1.5, 100).toFixed(0)}/100</td></tr>
              <tr><td className="border px-2 py-1">–ú–æ—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤</td><td className="border px-2 py-1">{Math.min(score / 2, 100).toFixed(0)}/100</td></tr>
              <tr><td className="border px-2 py-1">–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞</td><td className="border px-2 py-1">{Math.min(score / 2, 100).toFixed(0)}%</td></tr>
            </tbody>
          </table>
        </div>
      </div>
    );
  }

  const current = scenarios[step];

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="space-y-4"
      >
        <Card>
          <CardContent className="space-y-4">
            <h2 className="text-xl font-semibold">{current.question}</h2>
            <p>{current.description}</p>
            <p><i>–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –∫–∞–ø—ñ—Ç–∞–ª:</i> <b>{capital}</b></p>
            <div className="text-4xl pt-2 text-center">
                {step === 0 && 'üè≠‚öôÔ∏èüí∏'}
                {step === 1 && 'üìâüìëüí°'}
                {step === 2 && 'üßØüîß‚ö†Ô∏è'}
                {step === 3 && 'üõªüè¢üöÄ'}
                {step === 4 && 'üìäüìàü§î'}
                {step === 5 && 'üèóÔ∏è‚öôÔ∏èüîÑ'}
                {step === 6 && 'üí∞üè¶üìù'}
                {step === 7 && 'üîãüèÉ‚Äç‚ôÇÔ∏èüì¶'}
                {step === 8 && 'üìáüßæüìö'}
                {step === 9 && 'üóëÔ∏èüìâ‚ôªÔ∏è'}
            </div>
            <div className="space-y-2">
              {current.options.map((opt, index) => (
                <Button key={index} onClick={() => handleAnswer(opt)}>{opt.text}</Button>
              ))}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}
